<?xml version="1.0" encoding="UTF-8" ?>
<project name="Awesome project" default="help">

    <!-- =================================================================  -->
    <!-- Basic ANT build script boilerplate for PHP projects                -->
    <!-- intended to be run in a CI environment                             -->
    <!-- =================================================================  -->

    <!-- Base properties -->
    <property name="rootDir" value="."/>
    <property name="appDir" value="${rootDir}/app"/>
    <property name="toolsDir" value="${rootDir}/vendor/bin"/>
    <property name="buildDir" value="${rootDir}/build"/>
    <property name="outputDir" value="${buildDir}/logs"/>

    <!-- DOCs -->
    <property name="docsDir" value="${buildDir}/api"/>
    <property name="docsTitle" value="Awesome project documentation"/>
    <property name="withDocs" value="false"/>

    <property name="phantomJsPort" value="4444" />
    <property name="threads" value="8"/>

    <!-- XML lint -->
    <property name="doLintXML" value="false"/>
    <property name="xmlDir" value= "."/>

    <!-- Environment, Target, Version etc. -->
    <property name="environment" value="develop"/>
    <property name="release" value="0.1"/>

    <property environment="env"/>

    <condition property="version"
               value="v${release}.${env.BUILD_NUMBER}"
               else="v${release}.${environment}">
        <isset property="env.BUILD_NUMBER"/>
    </condition>

    <condition property="isProduction" else="false">
        <equals arg1="${environment}" arg2="prod" />
    </condition>

    <condition property="isUnix">
        <os family="unix"/>
    </condition>

    <property name="deployment" value="${ant.project.name}_${app}_${version}"/>

    <!-- ============================================  -->
    <!-- Target: help. short description....           -->
    <!-- ============================================  -->
    <target name="help">
        <echo message="${line.separator}
        ----------------------------- ${line.separator}
        List of useful build targets  ${line.separator}
        ----------------------------- ${line.separator}
        ${line.separator}
        * install           run this after first git checkout ${line.separator}
                            - installs composer packages ${line.separator}
        ${line.separator}
        * test              run all tests ${line.separator}
                            - run this before you consider your task done ${line.separator}
        * lint              run static code analysis ${line.separator}
                            - run this to check systax errors ${line.separator}
        * build             deploy application to a given environment ${line.separator}
                            - run this to deploy dev and stating manually ${line.separator}
        * deploy            deploy application to a given environment ${line.separator}
                            - run this to deploy dev and stating manually ${line.separator}
        ${line.separator}" />
    </target>

    <!-- ============================================  -->
    <!-- Target: generate BuildInfo                    -->
    <!-- ============================================  -->
    <target name="buildinfo">
        <tstamp>
            <format property="builtAt" pattern="dd-MM-yyyy HH:mm" timezone="Europe/Berlin"/>
        </tstamp>
        <exec executable="uname" outputproperty="buildsystem"><arg value="-a"/></exec>
        <propertyfile file="${appDir}/version.properties"
            comment="This file is automatically generated - DO NOT EDIT">
            <entry key="buildtime" value="${builtAt}"/>
            <entry key="version" value="${version}"/>
            <entry key="build" value="${env.BUILD_NUMBER}"/>
            <entry key="deployment" value="${deployment}"/>
            <entry key="builder" value="${user.name}"/>
            <entry key="system" value="${buildsystem}"/>
        </propertyfile>
    </target>

    <!-- ============================================  -->
    <!-- Target: install. basic installation           -->
    <!-- ============================================  -->
    <target name="install"
            depends="install.dependencies"
            description=""/>

    <target name="install.dependencies"
            depends=""
            description="Run composer">
        <property name="COMPOSER_EXISTS" value="false"/>
        <!-- Check if composer.phar exists in toolsDir -->
        <available file="${toolsDir}/composer.phar" property="COMPOSER_EXISTS" value="true"/>
        <antcall target="getcomposer" />

        <exec executable="php" failonerror="true">
            <arg value="${toolsDir}/composer.phar" />
            <arg value="install" />
            <arg value="--no-progress" />
            <arg value="--optimize-autoloader" />
            <arg value="--working-dir=${rootDir}" />
        </exec>
    </target>

    <target name="getcomposer" unless="${COMPOSER_EXISTS}">
        <echo>Trying to load composer.phar from remote.</echo>
        <mkdir dir="${rootDir}/bin"/>
        <exec executable="bash">
            <arg value="-c"/>
            <arg value="curl -sS https://getcomposer.org/installer | php" />
        </exec>
        <move file="composer.phar" tofile="${toolsDir}/composer.phar"/>
    </target>

    <!-- CLEAN -->
    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${buildDir}/dist" quiet='true' />
        <delete dir="${outputDir}" quiet='true' />
        <delete dir="${buildDir}/pdepend" quiet='true' />
        <delete dir="${buildDir}/phpunit" quiet='true' />
        <property name="clean.done" value="true"/>
    </target>

    <!-- PREPARE -->
    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${buildDir}/dist"/>
        <mkdir dir="${outputDir}"/>
        <mkdir dir="${buildDir}/pdepend"/>
        <property name="prepare.done" value="true"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: lint . static code analysis.          -->
    <!-- ============================================  -->
    <target name="lint"
            depends="prepare"
            description="Run all tools for static-code analysis">
            <parallel threadCount="2">
               <antcall target="phploc"/>
               <antcall target="phpmd"/>
               <antcall target="pdepend"/>
               <antcall target="phpcs"/>
               <antcall target="phpcpd"/>
               <antcall target="xmllint"/>
            </parallel>
    </target>

    <target name="phploc"
            description="Measure project size using PHPLOC and print human readable output.">
        <exec executable="${toolsDir}/phploc">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${outputDir}/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${outputDir}/phploc.xml"/>
            <arg path="${appDir}"/>
            <arg path="${rootDir}/tests"/>
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and log result in XML format.">
        <exec executable="${toolsDir}/phpmd">
            <arg path="${appDir}" />
            <arg value="xml" />
            <arg path="${rootDir}/../phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${outputDir}/pmd.xml" />
        </exec>
    </target>

    <target name="pdepend"
            description="Calculate software metrics using PHP_Depend and log result in XML format.">
        <exec executable="${toolsDir}/pdepend">
            <arg value="--jdepend-xml=${outputDir}/jdepend.xml" />
            <arg value="--jdepend-chart=${buildDir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${buildDir}/pdepend/overview-pyramid.svg" />
            <arg path="${appDir}" />
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format.">
        <exec executable="${toolsDir}/phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${outputDir}/checkstyle.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${appDir}" />
        </exec>
    </target>

    <target name="phpcpd"
            description="Find duplicate code using PHPCPD and log result in XML format.">
        <exec executable="${toolsDir}/phpcpd">
            <arg value="--log-pmd" />
            <arg path="${outputDir}/pmd-cpd.xml" />
            <arg path="${appDir}" />
        </exec>
    </target>

    <target name="xmllint"
        description="Lint XML configuration files."
        if="${doLintXML}">
        <exec executable="${toolsdir}/xmllint" failonerror="true">
            <arg value="${xmlDir}"/>
            <arg value="--pattern=*.xml"/>
        </exec>
    </target>

    <!-- ============================================  -->
    <!-- Target: intended for console. test it all     -->
    <!-- ============================================  -->

    <!-- Run Unit Tests with Coverage through PHPUnit -->
    <target name="unit" description="Execute PHPUnit tests with coverage.">
        <exec executable="${toolsDir}/phpunit">
            <arg line= "-c ${rootDir}/phpunit.xml"/>
            <arg line="--testsuite unit"/>
            <arg line="--coverage-html=${buildDir}/phpunit/"/>
            <arg line="--coverage-clover=${outputDir}/phpunit-clover.xml"/>
            <arg line="--log-junit ${outputDir}/phpunit.xml"/>
        </exec>
    </target>

    <target name="test"
            description="">
        <phingcall target="test.cleanup" />
        <phingcall target="codeception.prepare" />
        <phingcall target="codeception.withoutCoverage" />
    </target>

    <!-- intended for console: quick unittest run
    <target name="unittests">
        <exec executable="${toolsDir}/codecept" checkreturn="true" passthru="true">
            <arg value="run" />
            <arg value="unit" />
        </exec>
    </target> -->

    <target name="test.cleanup"
            unless="test.cleanup.done"
            description="Cleanup output stuff">
        <fileset dir="${rootDir}/tests/_output/" id="deleteFiles">
            <exclude name="${rootDir}/tests/_output/.gitignore" />
        </fileset>
        <delete>
            <fileset refid="deleteFiles" />
        </delete>
        <property name="test.cleanup.done" value="true"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: before codeception                    -->
    <!-- ============================================  -->
    <target name="codeception.prepare">
        <!-- TODO: path not found on windows -->
        <!-- if it's already started by some other process, no problem -->
        <exec executable="${toolsDir}/phantomjs" spawn="true">
            <arg value="--webdriver=${phantomJsPort}" />
        </exec>
        <echo>Waiting to start</echo>
        <waitfor maxwait="10" maxwaitunit="second" checkevery="500">
            <http url="http://localhost:${phantomJsPort}/status" />
        </waitfor>
        <echo>Started.</echo>
    </target>

    <!-- ============================================  -->
    <!-- Target: codeception w/o coverage              -->
    <!-- ============================================  -->

    <target name="codeception.withoutCoverage"
            description="Run all php tests">

        <exec executable="${toolsDir}/codecept" checkreturn="true" passthru="true">
            <arg value="build" />
        </exec>

        <exec executable="${toolsDir}/codecept" checkreturn="true" passthru="true">
            <arg value="run" />
        </exec>

    </target>

    <!-- ============================================  -->
    <!-- Target: codeception                           -->
    <!-- ============================================  -->
    <target name="codeception"
            depends=""
            description="Run all php tests">

        <exec executable="${toolsDir}/codecept" checkreturn="true" passthru="true">
            <arg value="build" />
        </exec>

        <exec executable="${toolsDir}/codecept" checkreturn="true" passthru="true">
            <arg value="run" />
            <arg value="--coverage-xml" />
            <arg value="--coverage-html" />
            <arg value="--xml" />
            <arg value="--html" />
        </exec>

    </target>

    <!-- ============================================  -->
    <!-- Target: dist. Copy files for distribution.    -->
    <!-- ============================================  -->
    <target name="dist"
            description="Copy to build/dist folder"
            depends="dist.prepare">

        <patternset id="include_files">
            <include name="app/**"/>
            <include name="public/**"/>
            <include name="resources/**"/>
            <include name="vendor/**"/>
        </patternset>

        <patternset id="exclude_files">
            <exclude name=".env" />
            <exclude name="build/**" />
            <exclude name="./tests/**" />
            <exclude name="composer.*" />
            <exclude name="phpunit.xml" />
            <exclude name="codeception.yml" />
            <exclude name="**/.gitignore"/>
        </patternset>

        <copy todir="${buildDir}/dist" >
            <fileset dir="${rootDir}">
                <patternset refid="include_files"/>
                <patternset refid="exclude_files"/>
            </fileset>
        </copy>

        <tar destfile="${buildDir}/${deployment}.tar"
             basedir="${buildDir}/dist"/>

        <antcall target="dist.after" />
    </target>

    <target name="dist.prepare">
        <antcall target="dist.prepare-prod" />
        <antcall target="dist.prepare-dev" />
    </target>

    <target name="dist.prepare-prod" depends="prepare" if="${isProduction}">
        <echo>Running composer for PRODUCTION environment</echo>
        <exec executable="bash">
            <arg value="-c"/>
            <arg value="cp -f ${rootDir}/composer.lock ${rootDir}/composer.lock.bak" />
        </exec>

        <property name="COMPOSER_EXISTS" value="false"/>
        <!-- Check if composer.phar exists in toolsDir -->
        <available file="${toolsDir}/composer.phar" property="COMPOSER_EXISTS" value="true"/>
        <antcall target="getcomposer" />

        <exec executable="php" failonerror="true">
            <arg value="${toolsDir}composer.phar" />
            <arg value="install" />
            <arg value="--no-dev" />
            <arg value="--no-progress" />
            <arg value="--optimize-autoloader" />
            <arg value="--working-dir=${rootDir}" />
        </exec>

        <exec executable="bash">
            <arg value="-c"/>
            <arg value="mv -f ${rootDir}/composer.lock.bak ${rootDir}/composer.lock" />
        </exec>
    </target>

    <target name="dist.prepare-dev" unless="${isProduction}">
        <echo>Running composer for DEVELOPMENT environment</echo>
        <antcall target="install"/>
    </target>

    <target name="dist.after" depends="install" if="${isProduction}" />

    <!-- ============================================  -->
    <!-- Target: docs                           -->
    <!-- ============================================  -->
    <target name="docs"
            if="${withDocs}"
            depends="docs.prepare"
            description="Generate API-docs">

        <exec executable="${toolsDir}/phpdoc">
            <arg line="--directory ${appDir}
                --title '${docsTitle}'
                --target ${docsDir}" />
        </exec>
    </target>

    <target name="docs.prepare"
            depends=""
            description="Clean api-docs folder">
        <mkdir dir="${docsDir}" />
        <delete includeEmptyDirs="true">
            <fileset dir="${docsDir}" includes="**/*"/>
        </delete>
    </target>

    <!-- ============================================  -->
    <!-- Target: build and deploy, tbd                 -->
    <!-- ============================================  -->
    <target name="build"
            depends="install,lint,unit,docs,buildinfo"
            description="Build MTO RLP Application(s)" />

    <target name="deploy"
            depends="buildinfo,dist"
            description="Deploy application $targetapp} to environment ${environment}">
    </target>

    <!-- FTP Deploy -->
    <!-- <target name="deploy" description="Deploys the current working copy to a remote host using FileSync" depends="copy">

        <property name="hostname" value="false" override="true" />
        <property name="listonly" value="false" override="true" />
        <property name="hostfile" value="build/config/hosts/${hostname}.properties" />
        <available file="${hostfile}" property="hostfilefound" value="true"/>
        <fail unless="hostfilefound" message="Missing host configuration file (${hostfile})!"/>
        <property file="${hostfile}" />
        <tstamp />


        <ftpdeploy
          host="${ftp.host}"
          port="${ftp.port}"
          username="${ftp.username}"
          password="${ftp.password}"
          dir="${ftp.rootDir}"
          passive="false"
          mode="${ftp.mode}"
          level="debug"
          clearfirst="true">
            <fileset dir="${basedir}/build/dist">
                <include name="**/**" />
            </fileset>
        </ftpdeploy>
    </target> -->
</project>
